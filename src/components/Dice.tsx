/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.18 Dice.glb -o Dice.tsx -r public -k 
*/
import {
  RigidBody,
  RapierRigidBody,
  interactionGroups,
  euler,
  quat,
} from "@react-three/rapier";
import { Euler, Group, Mesh, MeshStandardMaterial, Vector3 } from "three";
import { useFrame } from "@react-three/fiber";
import { useRef, useState } from "react";
import { useGLTF, Html } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { RadialSlider } from "./RadialSlider";

type GLTFResult = GLTF & {
  nodes: {
    origin: Mesh;
    Dice_cell: Mesh;
    Dice_cell001: Mesh;
    Dice_cell002: Mesh;
    Dice_cell003: Mesh;
    Dice_cell004: Mesh;
    Dice_cell005: Mesh;
    Dice_cell006: Mesh;
    Dice_cell007: Mesh;
    Dice_cell008: Mesh;
    Dice_cell009: Mesh;
    Dice_cell010: Mesh;
    Dice_cell011: Mesh;
    Dice_cell012: Mesh;
    Dice_cell013: Mesh;
    Dice_cell014: Mesh;
    Dice_cell015: Mesh;
    Dice_cell016: Mesh;
    Dice_cell017: Mesh;
    Dice_cell018: Mesh;
    Dice_cell019: Mesh;
    Dice_cell020: Mesh;
    Dice_cell021: Mesh;
    Dice_cell022: Mesh;
    Dice_cell023: Mesh;
  };
  materials: {
    Dice: MeshStandardMaterial;
  };
};

export function Dice({
  dieId,
  position,
  rotation,
  roll,
  reset,
  selectedDie,
  setReset,
  setSelectedAction,
  setSelectedDie,
}: {
  dieId: number;
  position: Vector3;
  rotation: Euler;
  roll: boolean;
  reset: boolean;
  selectedDie: number;
  setReset: (reset: boolean) => void;
  setSelectedAction: (face: string, action: string) => void;
  setSelectedDie: (dieId: number) => void;
}) {
  const { nodes, materials } = useGLTF("/dice.glb") as GLTFResult;

  const piecesGroup = useRef<Group>(null);
  const originGroup = useRef<Group>(null);
  const origin = useRef<RapierRigidBody>(null);

  const [exploded, setExploded] = useState(false);

  useFrame(() => {
    if (roll && origin.current && piecesGroup.current && originGroup.current) {
      //
      const randX = randomIntFromInterval(-3, 3);
      const randZ = randomIntFromInterval(-3, 3);
      origin.current.applyImpulse(new Vector3(randX, 5, randZ), true);
      origin.current.applyTorqueImpulse({ x: 3, y: 3, z: 3 }, true);
      //
      piecesGroup.current.position.setX(originGroup.current.position.x);
      piecesGroup.current.position.setY(originGroup.current.position.y);
      piecesGroup.current.position.setZ(originGroup.current.position.z);
    }
    if (reset && origin.current && originGroup.current && piecesGroup.current) {
      setExploded(false);
      origin.current.resetForces(false);
      origin.current.resetTorques(false);
      origin.current.setTranslation(position, false);
      originGroup.current.position.setX(position.x);
      originGroup.current.position.setY(position.y);
      originGroup.current.position.setZ(position.z);
      piecesGroup.current.position.setX(position.x);
      piecesGroup.current.position.setY(position.y);
      piecesGroup.current.position.setZ(position.z);
      setReset(false);
    }
  });

  function randomIntFromInterval(min: number, max: number) {
    return Math.floor(Math.random() * (max - min + 1) + min);
  }

  function getDiceDetails() {
    if (!origin.current) {
      return;
    }
    const rot = euler().setFromQuaternion(quat(origin.current.rotation()));
    const x = getNormalizedDegree(rot.x);
    const y = getNormalizedDegree(rot.y);
    const z = getNormalizedDegree(rot.z);
    const die = getFace({ x, y, z });
    if (!die) {
      return;
    }
    return die.face;
  }

  function getNormalizedDegree(rotationValue: number) {
    const rotValue = rotationValue / (Math.PI / 180);
    let normalizedDegree = 0;
    if (rotValue > 45 && rotValue < 135) {
      normalizedDegree = 90;
    } else if (rotValue < -45 && rotValue > -135) {
      normalizedDegree = -90;
    } else if (
      (rotValue > 135 && rotValue < 215) ||
      (rotValue < -135 && rotValue > -215)
    ) {
      normalizedDegree = 180;
    }
    return normalizedDegree;
  }

  function getFace(degree: { x: number; y: number; z: number }) {
    const rotationLibrary = [
      { x: 0, y: 0, z: 0, face: "bombs" },
      { x: 0, y: 90, z: 0, face: "bombs" },
      { x: 180, y: 0, z: 180, face: "bombs" },
      { x: 0, y: -90, z: 0, face: "bombs" },
      { x: 180, y: 90, z: 180, face: "bombs" },
      { x: 180, y: -90, z: 180, face: "bombs" },
      { x: -90, y: 0, z: 0, face: "heads" },
      { x: -90, y: 0, z: 90, face: "heads" },
      { x: -90, y: 0, z: 180, face: "heads" },
      { x: -90, y: 0, z: -90, face: "heads" },
      { x: 0, y: 90, z: 90, face: "lanterns" },
      { x: 0, y: 0, z: 90, face: "lanterns" },
      { x: 90, y: 90, z: 0, face: "lanterns" },
      { x: -90, y: -90, z: 0, face: "lanterns" },
      { x: 0, y: -90, z: 90, face: "lanterns" },
      { x: -180, y: -180, z: 90, face: "lanterns" },
      { x: -90, y: 90, z: 180, face: "lanterns" },
      { x: 180, y: 90, z: -90, face: "lanterns" },
      { x: 180, y: 0, z: -90, face: "lanterns" },
      { x: 180, y: -90, z: -90, face: "lanterns" },
      { x: 180, y: 90, z: 90, face: "beers" },
      { x: 180, y: -90, z: 90, face: "beers" },
      { x: 0, y: 0, z: -90, face: "beers" },
      { x: 0, y: -90, z: -90, face: "beers" },
      { x: 90, y: -90, z: 0, face: "beers" },
      { x: -90, y: 90, z: 0, face: "beers" },
      { x: 180, y: 0, z: 90, face: "beers" },
      { x: 0, y: 90, z: -90, face: "beers" },
      { x: 90, y: 0, z: 0, face: "horns" },
      { x: 90, y: 0, z: -90, face: "horns" },
      { x: 90, y: 0, z: 180, face: "horns" },
      { x: 90, y: 0, z: 90, face: "horns" },
      { x: 90, y: 90, z: 90, face: "horns" },
      { x: 0, y: 0, z: 180, face: "axes" },
      { x: 180, y: -90, z: 0, face: "axes" },
      { x: 180, y: 90, z: 0, face: "axes" },
      { x: 180, y: 0, z: 0, face: "axes" },
      { x: 0, y: 90, z: 180, face: "axes" },
      { x: 0, y: -90, z: 180, face: "axes" },
    ];
    return rotationLibrary.find(function (obj) {
      if (obj.x === degree.x && obj.y === degree.y && obj.z === degree.z) {
        return obj;
      }
    });
  }

  function triggerAction(action: string) {
    if (exploded) {
      return;
    }
    setExploded(true);
    const face = getDiceDetails();
    if (!face) {
      return;
    }
    if (!origin.current) {
      return;
    }
    setSelectedAction(face, action);
    setSelectedDie(0);
  }

  return (
    <group>
      <group position={position} rotation={rotation} ref={originGroup}>
        <RigidBody
          type="dynamic"
          name="origin"
          ref={origin}
          collisionGroups={interactionGroups(0, [0])}
          mass={1000}
          friction={0.2}
          linearDamping={0.2}
        >
          <mesh
            name="origin"
            geometry={nodes.origin.geometry}
            material={materials.Dice}
            visible={!exploded}
            onPointerOver={() => (document.body.style.cursor = "pointer")}
            onPointerOut={() => (document.body.style.cursor = "")}
            onPointerMissed={() => setSelectedDie(0)}
            onClick={() => setSelectedDie(dieId)}
          />
          <Html center distanceFactor={10}>
            <div className="content">
              {dieId === selectedDie && !exploded && (
                <RadialSlider trigger={(action) => triggerAction(action)} />
              )}
            </div>
          </Html>
        </RigidBody>
      </group>
      <group position={position} rotation={rotation} ref={piecesGroup}>
        <Pieces exploded={exploded} />
      </group>
    </group>
  );
}

type OriginMap<T> = {
  [key: string]: T;
};

function Pieces({ exploded }: { exploded: boolean }) {
  const { nodes, materials } = useGLTF("/dice.glb") as GLTFResult;

  const piecesGroup = useRef<Group>(null);

  const D0 = useRef<RapierRigidBody>(null);
  const D1 = useRef<RapierRigidBody>(null);
  const D2 = useRef<RapierRigidBody>(null);
  const D3 = useRef<RapierRigidBody>(null);
  const D4 = useRef<RapierRigidBody>(null);
  const D5 = useRef<RapierRigidBody>(null);
  const D6 = useRef<RapierRigidBody>(null);
  const D7 = useRef<RapierRigidBody>(null);
  const D8 = useRef<RapierRigidBody>(null);
  const D9 = useRef<RapierRigidBody>(null);
  const D10 = useRef<RapierRigidBody>(null);
  const D11 = useRef<RapierRigidBody>(null);
  const D12 = useRef<RapierRigidBody>(null);
  const D13 = useRef<RapierRigidBody>(null);
  const D14 = useRef<RapierRigidBody>(null);
  const D15 = useRef<RapierRigidBody>(null);
  const D16 = useRef<RapierRigidBody>(null);
  const D17 = useRef<RapierRigidBody>(null);
  const D18 = useRef<RapierRigidBody>(null);
  const D19 = useRef<RapierRigidBody>(null);
  const D20 = useRef<RapierRigidBody>(null);
  const D21 = useRef<RapierRigidBody>(null);
  const D22 = useRef<RapierRigidBody>(null);
  const D23 = useRef<RapierRigidBody>(null);

  const originMap: OriginMap<Vector3> = {
    D0: new Vector3(0.592, 0.592, -0.896),
    D1: new Vector3(0.592, 0.896, -0.592),
    D2: new Vector3(0.896, 0.592, -0.592),
    D3: new Vector3(0.592, -0.896, -0.592),
    D4: new Vector3(0.592, -0.593, -0.896),
    D5: new Vector3(0.896, -0.593, -0.592),
    D6: new Vector3(0.896, 0.592, 0.593),
    D7: new Vector3(0.592, 0.896, 0.592),
    D8: new Vector3(0.592, 0.592, 0.896),
    D9: new Vector3(0.896, -0.592, 0.592),
    D10: new Vector3(0.592, -0.593, 0.896),
    D11: new Vector3(0.592, -0.896, 0.592),
    D12: new Vector3(-0.592, 0.592, -0.896),
    D13: new Vector3(-0.896, 0.592, -0.593),
    D14: new Vector3(-0.593, 0.896, -0.592),
    D15: new Vector3(-0.896, -0.592, -0.592),
    D16: new Vector3(-0.593, -0.592, -0.896),
    D17: new Vector3(-0.592, -0.896, -0.592),
    D18: new Vector3(-0.896, 0.592, 0.592),
    D19: new Vector3(-0.593, 0.592, 0.896),
    D20: new Vector3(-0.593, 0.896, 0.592),
    D21: new Vector3(-0.592, -0.896, 0.592),
    D22: new Vector3(-0.593, -0.593, 0.896),
    D23: new Vector3(-0.896, -0.592, 0.592),
  };

  useFrame(() => {
    if (piecesGroup.current && !exploded) {
      piecesGroup.current.children.forEach((body) => {
        const name = body.name;
        body.position.setX(originMap[name].x);
        body.position.setY(originMap[name].y);
        body.position.setZ(originMap[name].z);
      });
    }
  });

  return (
    <group ref={piecesGroup} visible={exploded}>
      <RigidBody
        type={exploded ? "dynamic" : "fixed"}
        ref={D0}
        position={originMap["Dice_cell"]}
        name="D0"
        collisionGroups={interactionGroups(1, [1])}
        mass={100}
        friction={0.2}
      >
        <mesh
          name="Dice_cell"
          geometry={nodes.Dice_cell.geometry}
          material={materials.Dice}
        />
      </RigidBody>
      <RigidBody
        type={exploded ? "dynamic" : "fixed"}
        ref={D1}
        position={originMap["Dice_cell001"]}
        name="D1"
        collisionGroups={interactionGroups(1, [1])}
        mass={20}
      >
        <mesh
          name="Dice_cell001"
          geometry={nodes.Dice_cell001.geometry}
          material={materials.Dice}
        />
      </RigidBody>
      <RigidBody
        type={exploded ? "dynamic" : "fixed"}
        ref={D2}
        position={originMap["Dice_cell002"]}
        name="D2"
        collisionGroups={interactionGroups(1, [1])}
        mass={20}
      >
        <mesh
          name="Dice_cell002"
          geometry={nodes.Dice_cell002.geometry}
          material={materials.Dice}
        />
      </RigidBody>
      <RigidBody
        type={exploded ? "dynamic" : "fixed"}
        ref={D3}
        position={originMap["Dice_cell003"]}
        name="D3"
        collisionGroups={interactionGroups(1, [1])}
        mass={20}
      >
        <mesh
          name="Dice_cell003"
          geometry={nodes.Dice_cell003.geometry}
          material={materials.Dice}
        />
      </RigidBody>
      <RigidBody
        type={exploded ? "dynamic" : "fixed"}
        ref={D4}
        position={originMap["Dice_cell004"]}
        name="D4"
        collisionGroups={interactionGroups(1, [1])}
        mass={20}
      >
        <mesh
          name="Dice_cell004"
          geometry={nodes.Dice_cell004.geometry}
          material={materials.Dice}
        />
      </RigidBody>
      <RigidBody
        type={exploded ? "dynamic" : "fixed"}
        ref={D5}
        position={originMap["Dice_cell005"]}
        name="D5"
        collisionGroups={interactionGroups(1, [1])}
        mass={20}
      >
        <mesh
          name="Dice_cell005"
          geometry={nodes.Dice_cell005.geometry}
          material={materials.Dice}
        />
      </RigidBody>
      <RigidBody
        type={exploded ? "dynamic" : "fixed"}
        ref={D6}
        position={originMap["Dice_cell006"]}
        name="D6"
        collisionGroups={interactionGroups(1, [1])}
        mass={20}
      >
        <mesh
          name="Dice_cell006"
          geometry={nodes.Dice_cell006.geometry}
          material={materials.Dice}
        />
      </RigidBody>
      <RigidBody
        type={exploded ? "dynamic" : "fixed"}
        ref={D7}
        position={originMap["Dice_cell007"]}
        name="D7"
        collisionGroups={interactionGroups(1, [1])}
        mass={20}
      >
        <mesh
          name="Dice_cell007"
          geometry={nodes.Dice_cell007.geometry}
          material={materials.Dice}
        />
      </RigidBody>
      <RigidBody
        type={exploded ? "dynamic" : "fixed"}
        ref={D8}
        position={originMap["Dice_cell008"]}
        name="D8"
        collisionGroups={interactionGroups(1, [1])}
        mass={20}
      >
        <mesh
          name="Dice_cell008"
          geometry={nodes.Dice_cell008.geometry}
          material={materials.Dice}
        />
      </RigidBody>
      <RigidBody
        type={exploded ? "dynamic" : "fixed"}
        ref={D9}
        position={originMap["Dice_cell009"]}
        name="D9"
        collisionGroups={interactionGroups(1, [1])}
        mass={20}
      >
        <mesh
          name="Dice_cell009"
          geometry={nodes.Dice_cell009.geometry}
          material={materials.Dice}
        />
      </RigidBody>
      <RigidBody
        type={exploded ? "dynamic" : "fixed"}
        ref={D10}
        position={originMap["Dice_cell010"]}
        name="D10"
        collisionGroups={interactionGroups(1, [1])}
        mass={20}
      >
        <mesh
          name="Dice_cell010"
          geometry={nodes.Dice_cell010.geometry}
          material={materials.Dice}
        />
      </RigidBody>
      <RigidBody
        type={exploded ? "dynamic" : "fixed"}
        ref={D11}
        position={originMap["Dice_cell011"]}
        name="D11"
        collisionGroups={interactionGroups(1, [1])}
        mass={20}
      >
        <mesh
          name="Dice_cell011"
          geometry={nodes.Dice_cell011.geometry}
          material={materials.Dice}
        />
      </RigidBody>
      <RigidBody
        type={exploded ? "dynamic" : "fixed"}
        ref={D12}
        position={originMap["Dice_cell012"]}
        name="D12"
        collisionGroups={interactionGroups(1, [1])}
        mass={20}
      >
        <mesh
          name="Dice_cell012"
          geometry={nodes.Dice_cell012.geometry}
          material={materials.Dice}
        />
      </RigidBody>
      <RigidBody
        type={exploded ? "dynamic" : "fixed"}
        ref={D13}
        position={originMap["Dice_cell013"]}
        name="D13"
        collisionGroups={interactionGroups(1, [1])}
        mass={20}
      >
        <mesh
          name="Dice_cell013"
          geometry={nodes.Dice_cell013.geometry}
          material={materials.Dice}
        />
      </RigidBody>
      <RigidBody
        type={exploded ? "dynamic" : "fixed"}
        ref={D14}
        position={originMap["Dice_cell014"]}
        name="D14"
        collisionGroups={interactionGroups(1, [1])}
        mass={20}
      >
        <mesh
          name="Dice_cell014"
          geometry={nodes.Dice_cell014.geometry}
          material={materials.Dice}
        />
      </RigidBody>
      <RigidBody
        type={exploded ? "dynamic" : "fixed"}
        ref={D15}
        position={originMap["Dice_cell015"]}
        name="D15"
        collisionGroups={interactionGroups(1, [1])}
        mass={20}
      >
        <mesh
          name="Dice_cell015"
          geometry={nodes.Dice_cell015.geometry}
          material={materials.Dice}
        />
      </RigidBody>
      <RigidBody
        type={exploded ? "dynamic" : "fixed"}
        ref={D16}
        position={originMap["Dice_cell016"]}
        name="D16"
        collisionGroups={interactionGroups(1, [1])}
        mass={20}
      >
        <mesh
          name="Dice_cell016"
          geometry={nodes.Dice_cell016.geometry}
          material={materials.Dice}
        />
      </RigidBody>
      <RigidBody
        type={exploded ? "dynamic" : "fixed"}
        ref={D17}
        position={originMap["Dice_cell017"]}
        name="D17"
        collisionGroups={interactionGroups(1, [1])}
        mass={20}
      >
        <mesh
          name="Dice_cell017"
          geometry={nodes.Dice_cell017.geometry}
          material={materials.Dice}
        />
      </RigidBody>
      <RigidBody
        type={exploded ? "dynamic" : "fixed"}
        ref={D18}
        position={originMap["Dice_cell018"]}
        name="D18"
        collisionGroups={interactionGroups(1, [1])}
        mass={20}
      >
        <mesh
          name="Dice_cell018"
          geometry={nodes.Dice_cell018.geometry}
          material={materials.Dice}
        />
      </RigidBody>
      <RigidBody
        type={exploded ? "dynamic" : "fixed"}
        ref={D19}
        position={originMap["Dice_cell019"]}
        name="D19"
        collisionGroups={interactionGroups(1, [1])}
        mass={20}
      >
        <mesh
          name="Dice_cell019"
          geometry={nodes.Dice_cell019.geometry}
          material={materials.Dice}
        />
      </RigidBody>
      <RigidBody
        type={exploded ? "dynamic" : "fixed"}
        ref={D20}
        position={originMap["Dice_cell020"]}
        name="D20"
        collisionGroups={interactionGroups(1, [1])}
        mass={20}
      >
        <mesh
          name="Dice_cell020"
          geometry={nodes.Dice_cell020.geometry}
          material={materials.Dice}
        />
      </RigidBody>
      <RigidBody
        type={exploded ? "dynamic" : "fixed"}
        ref={D21}
        position={originMap["Dice_cell021"]}
        name="D21"
        collisionGroups={interactionGroups(1, [1])}
        mass={20}
      >
        <mesh
          name="Dice_cell021"
          geometry={nodes.Dice_cell021.geometry}
          material={materials.Dice}
        />
      </RigidBody>
      <RigidBody
        type={exploded ? "dynamic" : "fixed"}
        ref={D22}
        position={originMap["Dice_cell022"]}
        name="D22"
        collisionGroups={interactionGroups(1, [1])}
        mass={20}
      >
        <mesh
          name="Dice_cell022"
          geometry={nodes.Dice_cell022.geometry}
          material={materials.Dice}
        />
      </RigidBody>
      <RigidBody
        type={exploded ? "dynamic" : "fixed"}
        ref={D23}
        position={originMap["Dice_cell023"]}
        name="D23"
        collisionGroups={interactionGroups(1, [1])}
        mass={20}
      >
        <mesh
          name="Dice_cell023"
          geometry={nodes.Dice_cell023.geometry}
          material={materials.Dice}
        />
      </RigidBody>
    </group>
  );
}

useGLTF.preload("/../Dice.glb");
